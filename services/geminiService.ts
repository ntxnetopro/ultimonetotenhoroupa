

import { GoogleGenAI, Type, Modality } from "@google/genai";
import type { ClothingItem, Outfit, MainCategory, Style } from '../types';
import { Categories, Styles } from "../types";

// Initialize the Google Gemini AI client
// The API key is expected to be set in the environment variables
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

/**
 * Helper to convert a data URL to a Gemini Part object, robustly handling newlines.
 * @param base64String - The base64 data URL.
 * @returns A Gemini Part object for inline data.
 */
const base64ToPart = (base64String: string) => {
    // This regex matches the data URL prefix (e.g., "data:image/jpeg;base64,") and captures the mime type.
    const match = base64String.match(/^data:(image\/\w+);base64,/);

    if (!match) {
        // Fallback for a raw base64 string that doesn't have the data URL prefix.
        // It's crucial to still clean up any whitespace (like newlines).
        const data = base64String.replace(/\s/g, '');
        return { inlineData: { data, mimeType: 'image/jpeg' } };
    }
    
    const mimeType = match[1];
    // Get the length of the entire prefix (e.g., "data:image/jpeg;base64,")
    const prefixLength = match[0].length;
    // Extract the base64 data by taking the substring after the prefix, and clean any whitespace.
    const data = base64String.substring(prefixLength).replace(/\s/g, '');
    
    return { inlineData: { data, mimeType } };
};


/**
 * Generates a styled look from a wardrobe based on occasion and style.
 * @param wardrobe - Array of available clothing items.
 * @param occasion - The occasion for the look.
 * @param style - The desired style.
 * @param existingLookItemIds - A 2D array of item IDs from previously generated looks to avoid duplicates.
 * @param mainItemId - An optional ID of a clothing item that MUST be included in the look.
 * @returns An object containing an array of item IDs for the look and a commentary from the AI stylist.
 */
export const generateStyledLook = async (
  wardrobe: ClothingItem[],
  occasion: string,
  style: string,
  existingLookItemIds: string[][],
  mainItemId?: string,
): Promise<{ itemIds: string[], commentary: string }> => {
  const wardrobeForPrompt = wardrobe.map(({ id, name, category, subcategory, color, style, fabric, fit, formality_level, season, versatility }) => ({ id, name, category, subcategory, color, style, fabric, fit, formality_level, season, versatility }));

  const mainItemPrompt = mainItemId
    ? `\n    - PE√áA-CHAVE OBRIGAT√ìRIA: O look DEVE OBRIGATORIAMENTE incluir a pe√ßa com o id '${mainItemId}'. Construa toda a combina√ß√£o ao redor dela.`
    : '';

  const prompt = `
    Voc√™ √© um estilista de moda IA especializado no mercado brasileiro feminino. Sua miss√£o √© criar looks coesos, apropriados e inspiradores baseados no guarda-roupa fornecido.

    Contexto:
    - Estilo desejado: "${style}"
    - Ocasi√£o: "${occasion}"
    - Guarda-roupa dispon√≠vel (JSON com todos os atributos): ${JSON.stringify(wardrobeForPrompt)}
    - Looks j√° gerados (evite combina√ß√µes de IDs id√™nticas): ${JSON.stringify(existingLookItemIds)}${mainItemPrompt}

    === METODOLOGIA DE AN√ÅLISE ===

    **ETAPA 1: DIAGN√ìSTICO INICIAL**
    Sempre avalie:
    - Se houver uma pe√ßa-chave, ela √© adequada para a ocasi√£o e estilo? Se n√£o for, mencione isso no coment√°rio.
    - Quantas pe√ßas por categoria/estilo existem no guarda-roupa?
    - H√° diversidade suficiente para o estilo solicitado?
    - A ocasi√£o √© compat√≠vel com o estilo escolhido?
    - Quais s√£o as limita√ß√µes do guarda-roupa atual?

    **ETAPA 2: MATRIZ DE COMPATIBILIDADE**

    OCASI√ÉO vs ESTILO - Compatibilidades:

    Trabalho:
    ‚úÖ Elegante, Minimalista, Smart Casual
    ‚ùå Esportivo, Streetwear extremo

    Academia/Exerc√≠cios:
    ‚úÖ Esportivo
    ‚ùå Elegante, Boho (explicar que s√£o inadequados)

    Festa/Evento:
    ‚úÖ Elegante, Boho (dependendo do evento), Minimalista sofisticado
    ‚ùå Esportivo, Casual extremo

    Casual/Dia a dia:
    ‚úÖ Casual, Minimalista, Boho, Streetwear
    ‚ùå Muito formal

    Encontro:
    ‚úÖ Elegante, Casual chique, Boho, Minimalista
    ‚ùå Esportivo, muito desleixado

    **ETAPA 3: SISTEMA DE SCORING AVAN√áADO**

    Para cada combina√ß√£o potencial, calcule:

    1.  **Main_Piece_Inclusion (0 ou 100)**:
      - Se 'mainItemId' for fornecido, a pe√ßa est√° no look? (100 se sim, 0 se n√£o). Se n√£o for fornecido, o score √© sempre 100.
      - Se o score for 0 aqui, a combina√ß√£o √© inv√°lida.

    2.  **Style_Harmony (0-100)**:
      - Todas as pe√ßas t√™m styles compat√≠veis?
      - Formality_levels s√£o coerentes? (diferen√ßa m√°xima de 2 pontos)

    3.  **Color_Compatibility (0-100)**:
      - Cores harmonizam entre si?
      - M√°ximo 3 cores diferentes no look

    4.  **Occasion_Appropriateness (0-100)**:
      - Formality_level m√©dio do look combina com a ocasi√£o?
      - Academia = 1-3, Trabalho = 6-9, Festa = 7-10, Casual = 3-6

    5.  **Completeness (0-100)**:
      - Look tem todas as partes essenciais?
      - Obrigat√≥rio: Top + Bottom (ou vestido) + Cal√ßado
      - Opcional mas valorizado: Sobreposi√ß√£o, Acess√≥rios

    6.  **Uniqueness (0-100)**:
      - Combina√ß√£o √© diferente das j√° criadas (existingLookItemIds)?
      - Penalize repeti√ß√µes de mesmas pe√ßas

    **Score Total = (Main_Piece_Inclusion √ó 1.0) * [(Style_Harmony √ó 0.3) + (Color_Compatibility √ó 0.2) + (Occasion_Appropriateness √ó 0.3) + (Completeness √ó 0.15) + (Uniqueness √ó 0.05)]**

    **ETAPA 4: CRIT√âRIOS DE APROVA√á√ÉO**

    - Score ‚â• 75: Look excelente, retorne com confian√ßa
    - Score 60-74: Look aceit√°vel, mas mencione limita√ß√µes
    - Score < 60: N√£o criar look, explicar por que n√£o funcionou

    === CEN√ÅRIOS DE RESPOSTA ===

    **CEN√ÅRIO 1: SUCESSO (Score ‚â• 60)**
    {
      "itemIds": ["id1", "id2", "id3", "id4"],
      "commentary": "[Abertura motivacional] Este look √© perfeito para [ocasi√£o]! [Explica√ß√£o t√©cnica] A combina√ß√£o funciona porque [justificativa baseada em cores/estilos/ocasi√£o]. [Dica de styling] Para finalizar: [sugest√£o espec√≠fica de como usar/combinar]. [Score se for 60-74] *Dica: seu guarda-roupa ficaria ainda mais vers√°til com [sugest√£o espec√≠fica]."
    }

    **CEN√ÅRIO 2: SEM PE√áAS ADEQUADAS**
    Use os templates de mensagem educativa:
    - Esportivo: "N√£o encontrei pe√ßas de academia no seu guarda-roupa! Para looks esportivos, voc√™ precisaria de: tops dry-fit, leggings/shorts esportivos e t√™nis. Que tal fotografar suas roupas de treino? üí™"
    - Elegante: "Para criar looks elegantes, seu guarda-roupa precisa de pe√ßas mais formais. Sugest√µes: blazers, camisas de tecido nobre, vestidos estruturados, sapatos de salto ou sapatilhas refinadas. ‚ú®"
    - Minimalista: "O estilo minimalista pede pe√ßas com cortes limpos e cores neutras. Procure por: camisas b√°sicas, cal√ßas de alfaiataria, vestidos de linha reta em tons como preto, branco, cinza ou nude. ü§ç"
    - Boho: "Para o estilo boho, voc√™ precisaria de pe√ßas com mais personalidade: vestidos fluidos, quimonos, blusas com texturas, acess√≥rios artesanais ou estampas diferenciadas. üå∏"
    - Streetwear: "O look streetwear pede atitude urbana: moletons oversized, t√™nis chamativos, jaquetas bomber, pe√ßas com logos ou estampas gr√°ficas. üëü"
    - Casual: "Para looks casuais, adicione ao seu guarda-roupa: camisetas confort√°veis, jeans, t√™nis casuais, cardigans ou blusas descontra√≠das. üòä"
    - Incompatibilidade ocasi√£o x estilo: "O estilo '[estilo]' n√£o √© ideal para '[ocasi√£o]'. Para [ocasi√£o], recomendo: [estilos apropriados]. Posso criar um look incr√≠vel se voc√™ escolher um estilo mais adequado! üòâ"
    - Guarda-roupa limitado: "Seu guarda-roupa tem potencial, mas ainda √© pequeno para criar muitas varia√ß√µes. Que tal fotografar mais pe√ßas? Quanto mais op√ß√µes, mais looks incr√≠veis posso criar para voc√™! üì∏"

    **CEN√ÅRIO 3: SEM NOVAS COMBINA√á√ïES**
    "J√° explorei todas as combina√ß√µes poss√≠veis de [estilo] para [ocasi√£o] com seu guarda-roupa atual! Para novos looks: 1) Tente outro estilo, 2) Mude a ocasi√£o, ou 3) Adicione novas pe√ßas fotografando-as. Estou sempre aqui para criar looks √∫nicos! ‚ú®"

    === REGRAS T√âCNICAS OBRIGAT√ìRIAS ===
    1.  SEMPRE retorne JSON v√°lido { "itemIds": [...], "commentary": "..." }.
    2.  'itemIds' deve ser um array, mesmo que vazio [].
    3.  'commentary' NUNCA deve ser vazio; forne√ßa sempre feedback √∫til.
    4.  M√≠nimo 3 pe√ßas para um look completo (a menos que seja um vestido/macac√£o com cal√ßado).
    5.  Se 'mainItemId' for fornecido, ele DEVE estar no array 'itemIds'. Se for imposs√≠vel criar um look com ele, retorne um 'commentary' explicando o motivo e um 'itemIds' vazio.
    6.  NUNCA repita combina√ß√µes de IDs de 'existingLookItemIds'.
    7.  Priorize pe√ßas com 'versatility' alta.
  `;

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: prompt,
    config: {
      responseMimeType: 'application/json',
      responseSchema: {
        type: Type.OBJECT,
        properties: {
          itemIds: {
            type: Type.ARRAY,
            items: { type: Type.STRING },
            description: "Uma lista dos IDs das pe√ßas de roupa selecionadas para o look."
          },
          commentary: {
            type: Type.STRING,
            description: "Um breve coment√°rio de moda sobre o look criado ou o motivo pelo qual um look n√£o p√¥de ser criado, em portugu√™s do Brasil."
          }
        },
        required: ["itemIds", "commentary"]
      }
    }
  });

  const jsonResponse = JSON.parse(response.text);
  return jsonResponse;
};


/**
 * Generates a virtual try-on image by dressing a user's photo with a given outfit.
 * @param userPhoto - A base64 encoded string of the user's photo.
 * @param outfit - An object containing the clothing items for the look.
 * @returns A base64 encoded string of the generated image.
 */
export const generateVirtualTryOnImage = async (
  userPhoto: string,
  outfit: Outfit
): Promise<string> => {
  const model = 'gemini-2.5-flash-image-preview';

  const parts: any[] = [];

  const outfitItems = [
      outfit.dress, 
      outfit.top, 
      outfit.bottom,
      outfit.outerwear, 
      outfit.shoes, 
      ...(outfit.accessories || [])
  ].filter((item): item is ClothingItem => !!item);

  if (outfitItems.length === 0) {
      throw new Error("Nenhuma pe√ßa de roupa foi fornecida para o provador virtual.");
  }
  
  parts.push(base64ToPart(userPhoto));
  
  outfitItems.forEach(item => {
    if (item) {
        parts.push(base64ToPart(item.image));
    }
  });

  const itemDescriptions = outfitItems.map(item => `${item.name} (${item.subcategory})`).join(', ');
  const promptText = `
    Aja como um provador virtual. Sua tarefa √© vestir a mulher na primeira imagem com as pe√ßas de roupa fornecidas nas imagens seguintes.
    - Substitua a roupa que ela est√° usando pelas pe√ßas do look.
    - Mantenha o rosto, o corpo e a pose da foto original.
    - O look √© composto por: ${itemDescriptions}.
    
    === REGRAS DE GERA√á√ÉO OBRIGAT√ìRIAS ===
    1.  **Fundo Claro:** O resultado DEVE ter um fundo claro e neutro, como uma foto de e-commerce ou cat√°logo de moda.
    2.  **Sem Cortes (Enquadramento Completo):** A imagem gerada DEVE mostrar a modelo de corpo inteiro, dos p√©s √† cabe√ßa. Nenhuma parte do corpo ou do look pode ser cortada.
    3.  **Fotorrealismo:** O resultado final deve ser uma imagem fotorrealista da mulher usando o look completo.
  `;

  parts.push({ text: promptText });

  const response = await ai.models.generateContent({
    model: model,
    contents: { parts },
    config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
    },
  });

  for (const part of response.candidates[0].content.parts) {
    if (part.inlineData) {
      const base64ImageBytes: string = part.inlineData.data;
      const mimeType = part.inlineData.mimeType || 'image/png';
      return `data:${mimeType};base64,${base64ImageBytes}`;
    }
  }

  throw new Error("A IA n√£o conseguiu gerar uma imagem para o provador virtual. Tente novamente.");
};

/**
 * Removes the background from a clothing item image and replaces it with a solid white background.
 * @param imageBase64 - A base64 encoded string of the clothing item image.
 * @returns A base64 encoded string of the image with a white background.
 */
export const removeImageBackground = async (
    imageBase64: string
): Promise<string> => {
    const model = 'gemini-2.5-flash-image-preview';

    const imagePart = base64ToPart(imageBase64);
    const textPart = { text: "Isole a pe√ßa de roupa principal nesta imagem e coloque-a sobre um fundo totalmente branco e s√≥lido. O resultado deve ser uma imagem n√≠tida da pe√ßa de roupa, sem sombras, sobre um fundo branco puro." };

    try {
        const response = await ai.models.generateContent({
            model: model,
            contents: { parts: [imagePart, textPart] },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });

        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                const base64ImageBytes: string = part.inlineData.data;
                const mimeType = 'image/jpeg'; // Force JPEG for white background
                return `data:${mimeType};base64,${base64ImageBytes}`;
            }
        }
        
        console.warn("IA did not return an image for background removal, returning original.");
        return imageBase64; // Fallback to original if no image part is found

    } catch (error) {
        console.error("Error removing image background, returning original image:", error);
        return imageBase64;
    }
};

/**
 * Analyzes a clothing item image and returns its attributes.
 * @param imageBase64 - A base64 encoded string of the clothing item image.
 * @returns An object with the item's attributes.
 */
export const analyzeClothingItem = async (
    imageBase64: string
): Promise<Omit<ClothingItem, 'id' | 'image'>> => {
    const validCategories = Object.keys(Categories);
    const validStyles = Styles;

    const prompt = `
        Voc√™ √© um especialista em moda e cataloga√ß√£o com profundo conhecimento do mercado brasileiro feminino. Analise a imagem da pe√ßa de roupa fornecida e retorne OBRIGATORIAMENTE um JSON com os seguintes atributos:

        === ATRIBUTOS OBRIGAT√ìRIOS ===

        1.  **name** (string): Nome descritivo incluindo material/corte/detalhes √∫nicos se aparentes. Use terminologia brasileira familiar. Exemplos: "Camisa de linho manga bufante", "Cal√ßa jeans skinny cintura alta", "Vestido midi estampado floral", "Blazer estruturado preto".

        2.  **category** (string): OBRIGATORIAMENTE uma das op√ß√µes: ${JSON.stringify(validCategories)}.

        3.  **subcategory** (string): Subcategoria espec√≠fica e precisa dentro da categoria principal. Seja criativo mas l√≥gico. Exemplos: "Blusas", "Camisetas", "Regatas", "Jeans", "Vestidos Casuais", "T√™nis Casuais".

        4.  **color** (string): Cor principal ou descri√ß√£o do padr√£o dominante. Seja espec√≠fico: "Azul marinho", "Rosa millennial", "Estampado animal print", "Listrado preto e branco".

        5.  **style** (string): OBRIGATORIAMENTE uma das op√ß√µes: ${JSON.stringify(validStyles)}. Use o contexto cultural brasileiro para classifica√ß√£o.

        6.  **fabric** (string): Material identific√°vel ou estimativa. Op√ß√µes: "Algod√£o", "Jeans", "Linho", "Seda", "Tricot", "Dry-fit", "Poli√©ster", "Viscose", "Couro", "Suede", "N√£o identific√°vel".

        7.  **fit** (string): Tipo de caimento. Op√ß√µes: "Justo", "Solto", "Oversized", "Estruturado", "Flu√≠do", "Slim", "Regular".

        8.  **formality_level** (number): Escala 1-10 (1-2: Super casual, 3-4: Casual, 5-6: Smart casual, 7-8: Elegante, 9-10: Muito formal).

        9.  **season** (array de strings): Esta√ß√µes apropriadas. Op√ß√µes: ["Primavera", "Ver√£o", "Outono", "Inverno", "Todo ano"].

        10. **versatility** (number): Escala 1-10 de versatilidade (10: Pe√ßa coringa, 1: Pe√ßa muito espec√≠fica).

        === CRIT√âRIOS DE CLASSIFICA√á√ÉO POR ESTILO ===
        - **ESPORTIVO**: Exclusivamente para exerc√≠cios f√≠sicos. Tecidos t√©cnicos. formality_level: 1-2.
        - **CASUAL**: Uso di√°rio, conforto + estilo. formality_level: 3-5.
        - **ELEGANTE**: Ocasi√µes formais, trabalho. formality_level: 7-10.
        - **MINIMALISTA**: Linhas limpas, cores neutras.
        - **BOHO**: Estilo livre, natural, estampas, texturas.
        - **STREETWEAR**: Urbano, despojado, oversized.

        === VALIDA√á√ÉO E QUALIDADE ===
        - SEMPRE retorne JSON v√°lido e completo. TODOS os campos s√£o obrigat√≥rios. Se incerto, use estimativa l√≥gica ou "N√£o identific√°vel". NUNCA deixe campos undefined/null/vazios. O estilo escolhido deve ser coerente com o formality_level.
    `;

    const imagePart = base64ToPart(imageBase64);

    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: { parts: [imagePart, { text: prompt }] },
            config: {
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        name: { type: Type.STRING },
                        category: { type: Type.STRING, enum: validCategories },
                        subcategory: { type: Type.STRING },
                        color: { type: Type.STRING },
                        style: { type: Type.STRING, enum: validStyles },
                        fabric: { type: Type.STRING },
                        fit: { type: Type.STRING },
                        formality_level: { type: Type.NUMBER },
                        season: { type: Type.ARRAY, items: { type: Type.STRING } },
                        versatility: { type: Type.NUMBER },
                    },
                    required: ["name", "category", "subcategory", "color", "style", "fabric", "fit", "formality_level", "season", "versatility"],
                },
            },
        });

        const analyzedData = JSON.parse(response.text);

        const categoryKey = analyzedData.category as MainCategory;
        if (!Categories[categoryKey]) {
            throw new Error(`Categoria inv√°lida retornada pela IA: ${analyzedData.category}`);
        }

        return analyzedData as Omit<ClothingItem, 'id' | 'image'>;

    } catch (error) {
        console.error("Error analyzing clothing item:", error);
        throw new Error("A resposta da IA n√£o corresponde ao formato esperado.");
    }
};
